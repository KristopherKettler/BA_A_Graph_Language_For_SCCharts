// Generated by de.jabc.cinco.meta.plugin.event.generator.template.EventUserClassTemplate

package info.scce.cinco.product.scchart.events

import graphmodel.Direction
import graphmodel.ModelElementContainer
import info.scce.cinco.product.scchart.mglid.scchart.SCChartReferece
import info.scce.cinco.product.scchart.mglid.scchart.SCChart
import info.scce.cinco.product.scchart.mglid.scchart.RootState
import info.scce.cinco.product.scchart.mglid.scchart.SuperState
import info.scce.cinco.product.scchart.mglid.scchart.Region
import info.scce.cinco.product.scchart.mglid.scchart.InitialState
import info.scce.cinco.product.scchart.mglid.scchart.FinalState
import info.scce.cinco.product.scchart.mglid.scchart.InitialFinalState
import info.scce.cinco.product.scchart.mglid.scchart.InitialSCChartReferece
import info.scce.cinco.product.scchart.mglid.scchart.FinalSCChartReferece
import info.scce.cinco.product.scchart.mglid.scchart.InitialFinalSCChartReferece
import info.scce.cinco.product.scchart.mglid.scchart.InitialSuperState
import info.scce.cinco.product.scchart.mglid.scchart.FinalSuperState
import info.scce.cinco.product.scchart.mglid.scchart.InitialFinalSuperState
import info.scce.cinco.product.scchart.mglid.scchart.Transition
import info.scce.cinco.product.scchart.mglid.scchart.SimpleState
import info.scce.cinco.product.scchart.mglid.scchart.TerminationTransition
import info.scce.cinco.product.scchart.mglid.scchart.StrongAbortTransition
import info.scce.cinco.product.scchart.mglid.scchart.DeferredTransition
import info.scce.cinco.product.scchart.mglid.scchart.HistoryTransition
import info.scce.cinco.product.scchart.mglid.scchart.StrongAbortDeferredTransition
import info.scce.cinco.product.scchart.mglid.scchart.TerminationDeferredTransition
import info.scce.cinco.product.scchart.mglid.scchart.TerminationHistoryTransition
import info.scce.cinco.product.scchart.mglid.scchart.StrongAbortHistoryTransition
import info.scce.cinco.product.scchart.mglid.scchart.DeferredHistoryTransition
import info.scce.cinco.product.scchart.mglid.scchart.StrongAbortDeferredHistoryTransition
import info.scce.cinco.product.scchart.mglid.scchart.TerminationDeferredHistoryTransition

/* 
 * About this class:
 * - This is a default implementation for info.scce.cinco.product.scchart.mglid.scchart.event.SCChartRefereceEvent.
 * - This class was generated, because you added an "@event" annotation to
 *   Container "SCChartReferece" in "SCChart.mgl".
 * - This file will not be overwritten on future generation processes.
 * 
 * Available event methods:
 * - preCreate(Class<? extends SCChartReferece> elementClass, ModelElementContainer container, int x, int y, int width, int height)
 * - preDelete(SCChartReferece element)
 * - preMove(SCChartReferece element, ModelElementContainer newContainer, int newX, int newY)
 * - preResize(SCChartReferece element, int newWidth, int newHeight, int newX, int newY, Direction direction)
 * - postAttributeChange(SCChartReferece element, String attribute, Object oldValue)
 * - postCreate(SCChartReferece element)
 * - postDelete(SCChartReferece element)
 * - postDoubleClick(SCChartReferece element)
 * - postMove(SCChartReferece element, ModelElementContainer oldContainer, int oldX, int oldY)
 * - postResize(SCChartReferece element, int oldWidth, int oldHeight, int oldX, int oldY, Direction direction)
 * - postSelect(SCChartReferece element)
 */
final class SCChartRefereceEvent extends info.scce.cinco.product.scchart.mglid.scchart.event.SCChartRefereceEvent {
	
	override postCreate(SCChartReferece element) {
		element.newRegionRef(10,30,element.width-20,element.height-40)
		setInputsOutputsOfRef(element)
	}
	
	def setInputsOutputsOfRef(SCChartReferece element){
		element.reference.rootStates.head.declarations.forEach[
			if(it.inputOutput!=' '){
				val String tmp = it.inputOutput + " " + it.declarationType + " " + it.name
				if(element.inputsOutputsOfRef!==null&&element.inputsOutputsOfRef!==""){
					element.inputsOutputsOfRef = element.inputsOutputsOfRef+ "," + tmp
				}
				else{
					element.inputsOutputsOfRef = tmp
				}
			}
		]
	}
	
	override postDoubleClick(SCChartReferece element) {
		if(element.regionRefs.head.rootStates.size== 1){
			element.regionRefs.head.rootStates.head.delete
			element.resize(140,80)
			
		}
		else{
			element.resize(element.reference.rootStates.head.width+40,element.reference.rootStates.head.height+60)
			element.regionRefs.head.newRootState(10,10,element.reference.rootStates.head.width,element.reference.rootStates.head.height)
			element.regionRefs.head.rootStates.head.regions.head.delete
			element.regionRefs.head.rootStates.head.name = element.reference.rootStates.head.name
			element.regionRefs.head.rootStates.head.label = element.reference.rootStates.head.label
			if(element.reference.rootStates.head.declarations!==null){
				element.reference.rootStates.head.declarations.forEach[
			 		element.regionRefs.head.rootStates.head.newDeclaration(it.x,it.y,it.width,it.height)
			 		element.regionRefs.head.rootStates.head.declarations.last.inputOutput = it.inputOutput
			 		element.regionRefs.head.rootStates.head.declarations.last.constant = it.constant
			 		element.regionRefs.head.rootStates.head.declarations.last.signal = it.signal
			 		element.regionRefs.head.rootStates.head.declarations.last.declarationType = it.declarationType
			 		element.regionRefs.head.rootStates.head.declarations.last.name = it.name
			 		
			 		element.regionRefs.head.rootStates.head.declarations.last.assignment = it.assignment
			 		
			 	]
			}
			if(element.reference.rootStates.head.suspensions!==null){
			 	element.reference.rootStates.head.suspensions.forEach[
			 		element.regionRefs.head.rootStates.head.newSuspension(it.x,it.y,it.width,it.height)
			 		element.regionRefs.head.rootStates.head.suspensions.last.suspensionType = it.suspensionType
			 		element.regionRefs.head.rootStates.head.suspensions.last.condition = it.condition
			 	]
		 	}
		 	if(element.reference.rootStates.head.actions!==null){
			 	element.reference.rootStates.head.actions.forEach[
			 		element.regionRefs.head.rootStates.head.newAction(it.x,it.y,it.width,it.height)
			 		element.regionRefs.head.rootStates.head.actions.last.actionType = it.actionType
			 		element.regionRefs.head.rootStates.head.actions.last.condition = it.condition
			 		element.regionRefs.head.rootStates.head.actions.last.effect = it.effect
			 	]
		 	}
		 	if(element.reference.rootStates.head.regions!==null){
			 	element.reference.rootStates.head.regions.forEach[
			 		element.regionRefs.head.rootStates.head.newRegion(it.x,it.y,it.width,it.height)
			 		copyRegion(it,element.regionRefs.head.rootStates.head.regions.last)
			 	]
			 }
		}
	}
	
	def copySuperState(SuperState superStateRef,SuperState superStateCopy){
			superStateCopy.name =  superStateRef.name
			superStateCopy.label = superStateRef.label
			if(superStateRef.declarations!==null){
				superStateRef.declarations.forEach[
			 		superStateCopy.newDeclaration(it.x,it.y,it.width,it.height)
			 		superStateCopy.declarations.last.inputOutput = it.inputOutput
			 		superStateCopy.declarations.last.constant = it.constant
			 		superStateCopy.declarations.last.signal = it.signal
			 		superStateCopy.declarations.last.declarationType = it.declarationType
			 		superStateCopy.declarations.last.name = it.name
			 		
			 		superStateCopy.declarations.last.assignment = it.assignment
			 		
			 	]
			}
			if(superStateRef.suspensions!==null){
			 	superStateRef.suspensions.forEach[
			 		superStateCopy.newSuspension(it.x,it.y,it.width,it.height)
			 		superStateCopy.suspensions.last.suspensionType = it.suspensionType
			 		superStateCopy.suspensions.last.condition = it.condition
			 	]
		 	}
		 	if(superStateRef.actions!==null){
			 	superStateRef.actions.forEach[
			 		superStateCopy.newAction(it.x,it.y,it.width,it.height)
			 		superStateCopy.actions.last.actionType = it.actionType
			 		superStateCopy.actions.last.condition = it.condition
			 		superStateCopy.actions.last.effect = it.effect
			 	]
		 	}
		 	if(superStateRef.regions!==null){
			 	superStateRef.regions.forEach[
			 		superStateCopy.newRegion(it.x,it.y,it.width,it.height)
			 		copyRegion(it,superStateCopy.regions.last)
			 	]
			 }
	}
	
	def copyRegion(Region regionRef,Region regionCopy){
		if(regionRef.name!==null){
			regionCopy.name = regionRef.name
		}
		if(regionRef.label!==null){
			regionCopy.label = regionRef.label
		}
		if(regionRef.superStates!==null){
			regionRef.superStates.forEach[
				switch it{
					case it instanceof InitialSuperState : regionCopy.newInitialSuperState(it.x,it.y,it.width,it.height)
					case it instanceof FinalSuperState : regionCopy.newFinalSuperState(it.x,it.y,it.width,it.height)
					case it instanceof InitialFinalSuperState : regionCopy.newInitialFinalSuperState(it.x,it.y,it.width,it.height)
					default : regionCopy.newSuperState(it.x,it.y,it.width,it.height)
				}
				regionCopy.newSuperState(it.x,it.y,it.width,it.height)
				copySuperState(it,regionCopy.superStates.last)
			]
		}
		if(regionRef.simpleStates!==null){
			regionRef.simpleStates.forEach[
				switch it{
					case it instanceof InitialState : regionCopy.newInitialState(it.x,it.y,it.width,it.height)
					case it instanceof FinalState : regionCopy.newFinalState(it.x,it.y,it.width,it.height)
					case it instanceof InitialFinalState : regionCopy.newInitialFinalState(it.x,it.y,it.width,it.height)
					default : regionCopy.newSimpleState(it.x,it.y,it.width,it.height)
				}
				regionCopy.simpleStates.last.name = it.name
				regionCopy.simpleStates.last.label = it.label
			]
		}
		if(regionRef.SCChartRefereces!==null){
			regionRef.SCChartRefereces.forEach[
				switch it{
					case it instanceof InitialSCChartReferece : regionCopy.newInitialSCChartReferece(it.reference,it.x,it.y,it.width,it.height)
					case it instanceof FinalSCChartReferece : regionCopy.newFinalSCChartReferece(it.reference,it.x,it.y,it.width,it.height)
					case it instanceof InitialFinalSCChartReferece : regionCopy.newInitialFinalSCChartReferece(it.reference,it.x,it.y,it.width,it.height)
					default : regionCopy.newSCChartReferece(it.reference,it.x,it.y,it.width,it.height)
				}
				regionCopy.SCChartRefereces.last.name = it.name
				regionCopy.SCChartRefereces.last.label = it.label
				regionCopy.SCChartRefereces.last.inputsOutputsOfRef = it.inputsOutputsOfRef
				regionCopy.SCChartRefereces.last.assignments = it.assignments
			]
		}
		if(regionRef.superStates!==null){
			for(var i = 0; i<regionRef.superStates.size;i++){
				if(regionRef.superStates.get(i).getOutgoing.size>0){
					for(outgoing :regionRef.superStates.get(i).getOutgoing){
						if(outgoing.getTargetElement instanceof SuperState){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.superStates.get(i).newTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationTransition : regionCopy.superStates.get(i).newTerminationTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortTransition : regionCopy.superStates.get(i).newStrongAbortTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredTransition : regionCopy.superStates.get(i).newDeferredTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof HistoryTransition : regionCopy.superStates.get(i).newHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationDeferredTransition : regionCopy.superStates.get(i).newTerminationDeferredTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortDeferredTransition : regionCopy.superStates.get(i).newStrongAbortDeferredTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationHistoryTransition : regionCopy.superStates.get(i).newTerminationHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortHistoryTransition : regionCopy.superStates.get(i).newStrongAbortHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredHistoryTransition : regionCopy.superStates.get(i).newDeferredHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortDeferredHistoryTransition : regionCopy.superStates.get(i).newStrongAbortDeferredHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationDeferredHistoryTransition : regionCopy.superStates.get(i).newTerminationDeferredHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
							}
						}
						if(outgoing.getTargetElement instanceof SimpleState){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.superStates.get(i).newTransition(regionCopy.simpleStates.get(regionRef.simpleStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationTransition : regionCopy.superStates.get(i).newTerminationTransition(regionCopy.simpleStates.get(regionRef.simpleStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortTransition : regionCopy.superStates.get(i).newStrongAbortTransition(regionCopy.simpleStates.get(regionRef.simpleStates.indexOf(outgoing.getTargetElement)))
							}
						}
						if(outgoing.getTargetElement instanceof SCChartReferece){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.superStates.get(i).newTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement))) 
								case outgoing instanceof TerminationTransition : regionCopy.superStates.get(i).newTerminationTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortTransition : regionCopy.superStates.get(i).newStrongAbortTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredTransition : regionCopy.superStates.get(i).newDeferredTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof HistoryTransition : regionCopy.superStates.get(i).newHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationDeferredTransition : regionCopy.superStates.get(i).newTerminationDeferredTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortDeferredTransition : regionCopy.superStates.get(i).newStrongAbortDeferredTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationHistoryTransition : regionCopy.superStates.get(i).newTerminationHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortHistoryTransition : regionCopy.superStates.get(i).newStrongAbortHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredHistoryTransition : regionCopy.superStates.get(i).newDeferredHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortDeferredHistoryTransition : regionCopy.superStates.get(i).newStrongAbortDeferredHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationDeferredHistoryTransition : regionCopy.superStates.get(i).newTerminationDeferredHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
							}
						}
					}
				}
			}
		}
		if(regionRef.simpleStates!==null){
			for(var i = 0; i<regionRef.simpleStates.size;i++){
				if(regionRef.simpleStates.get(i).getOutgoing.size>0){
					for(outgoing :regionRef.simpleStates.get(i).getOutgoing){
						if(outgoing.getTargetElement instanceof SuperState){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.simpleStates.get(i).newTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredTransition : regionCopy.simpleStates.get(i).newDeferredTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof HistoryTransition : regionCopy.simpleStates.get(i).newHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredHistoryTransition : regionCopy.simpleStates.get(i).newDeferredHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
							}
						}
						if(outgoing.getTargetElement instanceof SimpleState){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.simpleStates.get(i).newTransition(regionCopy.simpleStates.get(regionRef.simpleStates.indexOf(outgoing.getTargetElement)))
							}
						}
						if(outgoing.getTargetElement instanceof SCChartReferece){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.simpleStates.get(i).newTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredTransition : regionCopy.simpleStates.get(i).newDeferredTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof HistoryTransition : regionCopy.simpleStates.get(i).newHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredHistoryTransition : regionCopy.simpleStates.get(i).newDeferredHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
							}
						}
						
						
					}
				}
				
			}
			
			
		}
		if(regionRef.SCChartRefereces!==null){
			for(var i = 0; i<regionRef.SCChartRefereces.size;i++){
				if(regionRef.SCChartRefereces.get(i).getOutgoing.size>0){
					for(outgoing :regionRef.SCChartRefereces.get(i).getOutgoing){
						if(outgoing.getTargetElement instanceof SuperState){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.SCChartRefereces.get(i).newTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationTransition : regionCopy.SCChartRefereces.get(i).newTerminationTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredTransition : regionCopy.SCChartRefereces.get(i).newDeferredTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof HistoryTransition : regionCopy.SCChartRefereces.get(i).newHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationDeferredTransition : regionCopy.SCChartRefereces.get(i).newTerminationDeferredTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortDeferredTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortDeferredTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationHistoryTransition : regionCopy.SCChartRefereces.get(i).newTerminationHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortHistoryTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredHistoryTransition : regionCopy.SCChartRefereces.get(i).newDeferredHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortDeferredHistoryTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortDeferredHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationDeferredHistoryTransition : regionCopy.SCChartRefereces.get(i).newTerminationDeferredHistoryTransition(regionCopy.superStates.get(regionRef.superStates.indexOf(outgoing.getTargetElement)))
							}
						}
						if(outgoing.getTargetElement instanceof SimpleState){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.SCChartRefereces.get(i).newTransition(regionCopy.simpleStates.get(regionRef.simpleStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationTransition : regionCopy.SCChartRefereces.get(i).newTerminationTransition(regionCopy.simpleStates.get(regionRef.simpleStates.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortTransition(regionCopy.simpleStates.get(regionRef.simpleStates.indexOf(outgoing.getTargetElement)))
							}
						}
						if(outgoing.getTargetElement instanceof SCChartReferece){
							switch outgoing{
								case outgoing instanceof Transition : regionCopy.SCChartRefereces.get(i).newTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationTransition : regionCopy.SCChartRefereces.get(i).newTerminationTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredTransition : regionCopy.SCChartRefereces.get(i).newDeferredTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof HistoryTransition : regionCopy.SCChartRefereces.get(i).newHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationDeferredTransition : regionCopy.SCChartRefereces.get(i).newTerminationDeferredTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortDeferredTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortDeferredTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationHistoryTransition : regionCopy.SCChartRefereces.get(i).newTerminationHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortHistoryTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof DeferredHistoryTransition : regionCopy.SCChartRefereces.get(i).newDeferredHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof StrongAbortDeferredHistoryTransition : regionCopy.SCChartRefereces.get(i).newStrongAbortDeferredHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
								case outgoing instanceof TerminationDeferredHistoryTransition : regionCopy.SCChartRefereces.get(i).newTerminationDeferredHistoryTransition(regionCopy.SCChartRefereces.get(regionRef.SCChartRefereces.indexOf(outgoing.getTargetElement)))
							}
						}
					}
				}
			}
		}
	}

	override postResize(SCChartReferece element, int oldWidth, int oldHeight, int oldX, int oldY, Direction direction) {
		element.regionRefs.head.width=element.width-20
		element.regionRefs.head.height=element.height-40
	}
}